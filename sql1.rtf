{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww31920\viewh16860\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 use sakila;\
\
\
-- Level 1\
-- 1 Write a SQL query to return the first and last names of all actors in the database.\
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM actor;\
\
-- 2 Write a SQL query to return the titles of all films in the database, along with their rental rates and replacement costs.\
Select title , rental_rate, replacement_cost from film;\
-- 3. Return the top 5 most rented films along with the number of times they have been rented.\
SELECT film.title, COUNT(rental.rental_id) AS rental_count\
FROM rental\
JOIN inventory ON rental.inventory_id = inventory.inventory_id\
JOIN film ON inventory.film_id = film.film_id\
GROUP BY film.title\
ORDER BY rental_count DESC\
LIMIT 5;\
\
-- 4. Return the average rental duration for each category of film in the database.\
SELECT category.name AS category, \
       AVG(DATEDIFF(rental.return_date, rental.rental_date)) AS avg_rental_duration_of_category\
FROM rental\
JOIN inventory ON rental.inventory_id = inventory.inventory_id\
JOIN film ON inventory.film_id = film.film_id\
JOIN film_category ON film.film_id = film_category.film_id\
JOIN category ON film_category.category_id = category.category_id\
WHERE rental.return_date IS NOT NULL  -- Exclude ongoing rentals\
GROUP BY category.category_id;\
\
\
-- 5. Return the names and addresses of all customers who rented a film in January 2022.\
SELECT DISTINCT customer.first_name, customer.last_name, address.address \
FROM customer\
JOIN rental ON customer.customer_id = rental.customer_id\
JOIN address ON customer.address_id = address.address_id\
WHERE rental.rental_date BETWEEN '2022-01-01' AND '2022-01-31';\
\
\
\
-- 6. Return the revenue generated by each store for the year 2021.\
SELECT store.store_id, SUM(payment.amount) AS total_revenue\
FROM payment\
JOIN staff ON payment.staff_id = staff.staff_id\
JOIN store ON staff.store_id = store.store_id\
WHERE YEAR(payment.payment_date) = 2021\
GROUP BY store.store_id;\
\
\
\
\
\
-- 7. Return the names of all actors who have appeared in more than 20 films.\
SELECT actor.first_name, actor.last_name, COUNT(film_actor.film_id) AS film_count\
FROM actor\
JOIN film_actor ON actor.actor_id = film_actor.actor_id\
GROUP BY actor.actor_id\
HAVING film_count > 20;\
\
-- 7. Return the names of all actors who have appeared in more than 20 films.\
SELECT actor.first_name, actor.last_name, COUNT(film_actor.film_id) AS film_count\
FROM actor\
JOIN film_actor ON actor.actor_id = film_actor.actor_id\
GROUP BY actor.actor_id\
HAVING film_count > 20;\
\
-- 8. Return the titles of all films with a rating of 'PG-13' and a length of more than 120 minutes.\
SELECT title\
FROM film\
WHERE rating = 'PG-13' AND length > 120;\
\
\
-- level 2\
\
\
-- 1. Return the top 10 customers who have generated the most revenue for the store.\
SELECT customer.first_name, customer.last_name, SUM(payment.amount) AS total_revenue\
FROM customer\
JOIN payment ON customer.customer_id = payment.customer_id\
GROUP BY customer.customer_id\
ORDER BY total_revenue DESC\
LIMIT 10;\
\
-- 2. Return names and contact information of customers who have rented films in all categories.\
SELECT customer.first_name, customer.last_name, customer.email, address.address\
FROM customer\
JOIN rental ON customer.customer_id = rental.customer_id\
JOIN inventory ON rental.inventory_id = inventory.inventory_id\
JOIN film_category ON inventory.film_id = film_category.film_id\
JOIN category ON film_category.category_id = category.category_id\
JOIN address ON customer.address_id = address.address_id\
GROUP BY customer.customer_id\
HAVING COUNT(DISTINCT category.category_id) = (SELECT COUNT(*) FROM category);\
\
-- 3. Return titles of all films that have been rented at least once but never returned.\
SELECT DISTINCT film.title\
FROM film\
JOIN inventory ON film.film_id = inventory.film_id\
JOIN rental ON inventory.inventory_id = rental.inventory_id\
WHERE rental.return_date IS NULL;\
\
-- 4. Return names of all actors who have appeared in at least one film in each category.\
SELECT actor.first_name, actor.last_name\
FROM actor\
JOIN film_actor ON actor.actor_id = film_actor.actor_id\
JOIN film_category ON film_actor.film_id = film_category.film_id\
GROUP BY actor.actor_id\
HAVING COUNT(DISTINCT film_category.category_id) = (SELECT COUNT(*) FROM category);\
\
-- 5. Return names of customers who rented the same film more than once \
SELECT \
    c.first_name, \
    c.last_name, \
    f.title, \
    COUNT(*) AS rental_count\
FROM rental r\
JOIN inventory i ON r.inventory_id = i.inventory_id\
JOIN film f ON i.film_id = f.film_id\
JOIN customer c ON r.customer_id = c.customer_id\
GROUP BY c.customer_id, f.film_id\
HAVING COUNT(*) > 1;\
\
-- 6. Return total revenue generated by each actor based on rental fees of films they appeared in.\
SELECT actor.first_name, actor.last_name, SUM(payment.amount) AS total_revenue\
FROM actor\
JOIN film_actor ON actor.actor_id = film_actor.actor_id\
JOIN inventory ON film_actor.film_id = inventory.film_id\
JOIN rental ON inventory.inventory_id = rental.inventory_id\
JOIN payment ON rental.rental_id = payment.rental_id\
GROUP BY actor.actor_id\
ORDER BY total_revenue DESC;\
\
-- 7\
SELECT a.first_name, a.last_name\
FROM actor a\
JOIN film_actor fa ON a.actor_id = fa.actor_id\
JOIN film f ON fa.film_id = f.film_id\
WHERE f.rating = 'R'\
AND NOT EXISTS (\
    SELECT 1\
    FROM film_actor fa2\
    JOIN film f2 ON fa2.film_id = f2.film_id\
    WHERE fa2.actor_id = a.actor_id AND f2.rating = 'G'\
)\
GROUP BY a.actor_id;\
\
-- 8\
SELECT f.title\
FROM rental r\
JOIN inventory i ON r.inventory_id = i.inventory_id\
JOIN film f ON i.film_id = f.film_id\
GROUP BY f.film_id\
HAVING COUNT(DISTINCT r.customer_id) > 50\
AND MAX(\
    (SELECT COUNT(*) \
     FROM rental r2 \
     WHERE r2.inventory_id = r.inventory_id \
     AND r2.customer_id = r.customer_id)\
) = 1;\
\
\
-- 9. Return names of customers who have rented a film from a category they never rented before. -> latest rental is a new category\
SELECT DISTINCT c.first_name, c.last_name\
FROM customer c\
JOIN rental r ON c.customer_id = r.customer_id\
JOIN inventory i ON r.inventory_id = i.inventory_id\
JOIN film_category fc ON i.film_id = fc.film_id\
WHERE NOT EXISTS (\
    SELECT 1\
    FROM rental r2\
    JOIN inventory i2 ON r2.inventory_id = i2.inventory_id\
    JOIN film_category fc2 ON i2.film_id = fc2.film_id\
    WHERE r2.customer_id = c.customer_id\
    AND fc2.category_id = fc.category_id\
    AND r2.rental_date < r.rental_date\
);\
\
\
-- 10. Return titles of films rented by EVERY customer who has rented from the 'Action' category.\
SELECT f.title \
FROM film f\
JOIN inventory i ON i.film_id = f.film_id\
JOIN rental r ON i.inventory_id = r.inventory_id\
WHERE r.customer_id IN (\
    SELECT DISTINCT c.customer_id \
    FROM customer c\
    JOIN rental r ON c.customer_id = r.customer_id\
    JOIN inventory i ON i.inventory_id = r.inventory_id\
    JOIN film_category fc ON fc.film_id = i.film_id\
    JOIN category ct ON ct.category_id = fc.category_id\
    WHERE LOWER(ct.name) = 'action'\
)\
GROUP BY f.film_id\
HAVING COUNT(DISTINCT r.customer_id) = (\
    SELECT COUNT(DISTINCT c.customer_id) \
    FROM customer c\
    JOIN rental r ON c.customer_id = r.customer_id\
    JOIN inventory i ON i.inventory_id = r.inventory_id\
    JOIN film_category fc ON fc.film_id = i.film_id\
    JOIN category ct ON ct.category_id = fc.category_id\
    WHERE LOWER(ct.name) = 'action'\
);\
\
\
-- level 3\
\
-- 1. Return the average rental duration for each combination of actor and category in the database, excluding actors who have not appeared in any films in a category.\
SELECT a.actor_id, a.first_name, a.last_name, c.name AS category_name, \
       AVG(DATEDIFF(r.return_date, r.rental_date)) AS avg_rental_duration\
FROM actor a\
JOIN film_actor fa ON a.actor_id = fa.actor_id\
JOIN film f ON fa.film_id = f.film_id\
JOIN film_category fc ON f.film_id = fc.film_id\
JOIN category c ON fc.category_id = c.category_id\
JOIN inventory i ON f.film_id = i.film_id\
JOIN rental r ON i.inventory_id = r.inventory_id\
WHERE r.return_date IS NOT NULL\
GROUP BY a.actor_id, c.category_id;\
\
-- 2. Return names of actors who appeared in a film with a rating of 'R' (length > 2 hours) but never in a film with a rating of 'G'.\
SELECT a.first_name, a.last_name\
FROM actor a\
JOIN film_actor fa ON a.actor_id = fa.actor_id\
JOIN film f ON fa.film_id = f.film_id\
WHERE f.rating = 'R' AND f.length > 120\
AND a.actor_id NOT IN (\
    SELECT DISTINCT a.actor_id\
    FROM actor a\
    JOIN film_actor fa ON a.actor_id = fa.actor_id\
    JOIN film f ON fa.film_id = f.film_id\
    WHERE f.rating = 'G'\
)\
GROUP BY a.actor_id;\
\
-- 3. Return names of customers who rented more than 10 films, along with films rented and total rental fee.\
SELECT c.first_name, c.last_name, i.film_id, COUNT(r.rental_id) AS total_films, SUM(p.amount) AS total_fee\
FROM customer c\
JOIN rental r ON c.customer_id = r.customer_id\
JOIN payment p ON r.rental_id = p.rental_id\
join inventory i on r.inventory_id = i.inventory_id\
GROUP BY c.customer_id, i.film_id\
HAVING COUNT(r.rental_id) > 10;\
\
-- 4. Return names of customers who have rented every film in a category, along with the total films rented and total rental fee.\
SELECT c.first_name, c.last_name, ct.name AS category_name, \
       COUNT(DISTINCT f.film_id) AS total_films_rented, SUM(p.amount) AS total_rental_fee\
FROM customer c\
JOIN rental r ON c.customer_id = r.customer_id\
JOIN inventory i ON r.inventory_id = i.inventory_id\
JOIN film f ON i.film_id = f.film_id\
JOIN film_category fc ON f.film_id = fc.film_id\
JOIN category ct ON fc.category_id = ct.category_id\
JOIN payment p ON r.rental_id = p.rental_id\
GROUP BY c.customer_id, ct.category_id\
HAVING COUNT(DISTINCT f.film_id) = (SELECT COUNT(*) FROM film_category WHERE category_id = fc.category_id);\
\
-- 5. Return titles of films rented by the same customer more than once in a single day, with customer names and rental count.\
SELECT c.first_name, c.last_name, f.title, DATE(r.rental_date) AS rental_day, COUNT(*) AS rental_count\
FROM customer c\
JOIN rental r ON c.customer_id = r.customer_id\
JOIN inventory i ON r.inventory_id = i.inventory_id\
JOIN film f ON i.film_id = f.film_id\
GROUP BY c.customer_id, f.film_id, DATE(r.rental_date)\
HAVING COUNT(*) > 1;\
\
\
-- 6 *****Return names of actors who appeared in at least one film with every other actor, including shared film count.\
SELECT a1.first_name, a1.last_name, COUNT(DISTINCT f.film_id) AS shared_films\
FROM actor a1\
JOIN film_actor fa1 ON a1.actor_id = fa1.actor_id\
JOIN film f ON fa1.film_id = f.film_id\
JOIN film_actor fa2 ON f.film_id = fa2.film_id\
JOIN actor a2 ON fa2.actor_id = a2.actor_id\
WHERE a1.actor_id <> a2.actor_id\
GROUP BY a1.actor_id\
HAVING COUNT(DISTINCT a2.actor_id) > (SELECT COUNT(*) FROM actor) - 198;\
\
\
-- 7. Return names of customers who rented at least one film from each category, with count per category.\
SELECT c.first_name, c.last_name, COUNT(DISTINCT ct.category_id) AS categories_rented\
FROM customer c\
JOIN rental r ON c.customer_id = r.customer_id\
JOIN inventory i ON r.inventory_id = i.inventory_id\
JOIN film f ON i.film_id = f.film_id\
JOIN film_category fc ON f.film_id = fc.film_id\
JOIN category ct ON fc.category_id = ct.category_id\
GROUP BY c.customer_id\
HAVING COUNT(DISTINCT ct.category_id) = (SELECT COUNT(*) FROM category);\
\
\
-- 8 Write a SQL query to return the titles of all films in the database that have been rented more than 100 times, but have never been rented by any customer who has rented a film with a rating of 'G'.\
SELECT f.title\
FROM film f\
JOIN inventory i ON f.film_id = i.film_id\
JOIN rental r ON i.inventory_id = r.inventory_id\
JOIN customer c ON r.customer_id = c.customer_id\
GROUP BY f.film_id\
HAVING COUNT(r.rental_id) > 100\
AND f.film_id NOT IN (\
    SELECT DISTINCT i2.film_id\
    FROM rental r2\
    JOIN inventory i2 ON r2.inventory_id = i2.inventory_id\
    JOIN film f2 ON i2.film_id = f2.film_id\
    WHERE f2.rating = 'G'\
    AND r2.customer_id IN (\
        SELECT DISTINCT r3.customer_id\
        FROM rental r3\
        JOIN inventory i3 ON r3.inventory_id = i3.inventory_id\
        JOIN film f3 ON i3.film_id = f3.film_id\
        WHERE f3.rating = 'G'\
    )\
);\
\
\
-- 9 Query to find customers who rented a film from a new category and never rented films longer than 3 hours\
SELECT DISTINCT c.first_name, c.last_name\
FROM customer c\
JOIN rental r ON c.customer_id = r.customer_id\
JOIN inventory i ON r.inventory_id = i.inventory_id\
JOIN film f ON i.film_id = f.film_id\
JOIN film_category fc ON f.film_id = fc.film_id\
WHERE NOT EXISTS (\
    SELECT 1\
    FROM rental r2\
    JOIN inventory i2 ON r2.inventory_id = i2.inventory_id\
    JOIN film f2 ON i2.film_id = f2.film_id\
    JOIN film_category fc2 ON f2.film_id = fc2.film_id\
    WHERE r2.customer_id = c.customer_id\
    AND fc2.category_id = fc.category_id\
    AND r2.rental_date < r.rental_date\
)\
AND c.customer_id NOT IN (\
    SELECT DISTINCT r3.customer_id\
    FROM rental r3\
    JOIN inventory i3 ON r3.inventory_id = i3.inventory_id\
    JOIN film f3 ON i3.film_id = f3.film_id\
    WHERE f3.length > 180\
);\
\
\
-- 10 Write a SQL query to return the names of all actors who have appeared in a film with a rating of 'PG-13' and a length of more than 2 hours, and have also appeared in a film with a rating of 'R' and a length of less than 90 minutes.\
SELECT DISTINCT a.first_name, a.last_name\
FROM actor a\
JOIN film_actor fa_pg ON a.actor_id = fa_pg.actor_id\
JOIN film f_pg ON fa_pg.film_id = f_pg.film_id\
JOIN film_actor fa_r ON a.actor_id = fa_r.actor_id\
JOIN film f_r ON fa_r.film_id = f_r.film_id\
WHERE f_pg.rating = 'PG-13' \
AND f_pg.length > 120\
AND f_r.rating = 'R' \
AND f_r.length < 90;\
\
\
\
-- level 4\
\
-- 1 Write a SQL query to update the rental rate of all films in the database that have been rented more than 100 times, setting the new rental rate to be 10% higher than the current rate.\
SET SQL_SAFE_UPDATES = 0;\
\
UPDATE film f\
JOIN (\
    SELECT f.film_id\
    FROM film f\
    JOIN inventory i ON f.film_id = i.film_id\
    JOIN rental r ON i.inventory_id = r.inventory_id\
    GROUP BY f.film_id\
    HAVING COUNT(r.rental_id) > 100\
) AS rented_films ON f.film_id = rented_films.film_id\
SET f.rental_rate = f.rental_rate * 1.10;\
\
SET SQL_SAFE_UPDATES = 1;  -- Re-enable safe mode\
\
\
\
-- 2 Write a SQL query to update the rental duration of all films in the database that have been rented more than 5 times, setting the new duration to be 5% longer than the current duration.\
SET SQL_SAFE_UPDATES = 0;  -- Disable safe mode\
\
UPDATE film  \
JOIN (\
    SELECT f.film_id\
    FROM film f\
    JOIN inventory i ON f.film_id = i.film_id\
    JOIN rental r ON i.inventory_id = r.inventory_id\
    GROUP BY f.film_id\
    HAVING COUNT(r.rental_id) > 5\
) AS rented_films ON film.film_id = rented_films.film_id\
SET film.rental_duration = ROUND(film.rental_duration * 1.05);\
\
\
\
\
\
\
-- 3 Write a SQL query to update the rental rate of all films in the 'Action' category that were released before the year 2005, setting the new rate to be 20% higher than the current rate.\
\
UPDATE film \
SET rental_rate = rental_rate * 1.20\
WHERE film_id IN (\
    SELECT sub.film_id FROM (\
        SELECT f.film_id \
        FROM film f\
        JOIN film_category fc ON f.film_id = fc.film_id\
        JOIN category cat ON cat.category_id = fc.category_id\
        WHERE cat.name = 'Action'\
        AND f.release_year < 2005\
    ) AS sub\
);\
\
\
-- 4 Write a SQL query to update the email address of all customers who have rented a film from the 'Horror' category in the month of October 2022, setting the new email address to be a combination of their current email address and the string 'horrorlover'.\
\
UPDATE customer c\
JOIN rental r ON c.customer_id = r.customer_id\
JOIN inventory i ON r.inventory_id = i.inventory_id\
JOIN film_category fc ON i.film_id = fc.film_id\
JOIN category cat ON fc.category_id = cat.category_id\
SET c.email = CONCAT(c.email, 'horrorlover')\
WHERE cat.name = 'Horror'\
AND r.rental_date BETWEEN '2022-10-01' AND '2022-10-31';\
\
\
-- 5\
UPDATE film f\
JOIN (\
    SELECT i.film_id\
    FROM rental r\
    JOIN inventory i ON r.inventory_id = i.inventory_id\
    GROUP BY i.film_id\
    HAVING COUNT(DISTINCT r.customer_id) > 10\
) AS rented_films ON f.film_id = rented_films.film_id\
SET f.rental_rate = LEAST(f.rental_rate * 1.05, 4.00);\
 \
-- 6 Write a SQL query to update the rental rate of all films in the database that have been rented by more than 10 customers, setting the new rate to be 5% higher than the current rate, but not higher than $4.00.\
\
UPDATE film\
SET rental_rate = 3.50\
WHERE rating = 'PG-13' \
AND length > 120;\
\
\
\
-- 7 **** Write a SQL query to update the rental duration of all films in the 'Sci-Fi' category that were released in the year 2010, setting the new duration to be equal to the length of the film in minutes.\
UPDATE film f1\
JOIN (\
    SELECT f.film_id\
    FROM film f\
    JOIN film_category fc ON f.film_id = fc.film_id\
    JOIN category c ON fc.category_id = c.category_id\
    WHERE c.name = 'Sci-Fi'\
    AND f.release_year = 2010\
) AS sub ON f1.film_id = sub.film_id\
SET f1.rental_duration = f1.length;\
\
\
-- 8 Write a SQL query to update the address of all customers who live in the same city as another customer with the same last name, setting the new address to be the concatenation of their current address and the string 'samecity'.\
\
UPDATE customer c1\
JOIN (\
    SELECT c2.customer_id, CONCAT(a1.address, ' samecity') AS new_address\
    FROM customer c2\
    JOIN address a1 ON c2.address_id = a1.address_id\
    JOIN city ci ON a1.city_id = ci.city_id\
    WHERE EXISTS (\
        SELECT 1\
        FROM customer c3\
        JOIN address a2 ON c3.address_id = a2.address_id\
        WHERE a2.city_id = ci.city_id\
        AND c3.last_name = c2.last_name\
        AND c3.customer_id <> c2.customer_id\
    )\
) AS subquery ON c1.customer_id = subquery.customer_id\
JOIN address a ON c1.address_id = a.address_id\
SET a.address = subquery.new_address;\
\
 -- 9 Write a SQL query to update the rental rate of all films in the 'Comedy' category that were released in the year 2007 or later, setting the new rate to be 15% lower than the current rate.\
UPDATE film f\
JOIN film_category fc ON f.film_id = fc.film_id\
JOIN category c ON fc.category_id = c.category_id\
SET f.rental_rate = f.rental_rate * 0.85\
WHERE c.name = 'Comedy' \
AND f.release_year >= 2007;\
\
\
-- 10 Write a SQL query to update the rental rate of all films in the database that have a rating of 'G' and a length of less than 1 hour, setting the new rate to be $1.50.\
UPDATE film\
SET rental_rate = 1.50\
WHERE rating = 'G' \
AND length < 60;\
\
\
\
SET SQL_SAFE_UPDATES = 1;  -- Re-enable safe mode\
}